use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.27
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1541335531',
        'name' => 'layouts/experimental.tt',
    },
    BLOCK => sub {
    my $context = shift || die "template sub called without context\n";
    my $stash   = $context->stash;
    my $output  = '';
    my $_tt_error;
    
    eval { BLOCK: {
$output .=  "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"";
#line 5 "/Users/stevedondley/perl/dancer2_sites/ZillTut/views/layouts/experimental.tt"
$output .=  $stash->get(['settings', 0, 'charset', 0]);
$output .=  "\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\">\n  <title>";
#line 7 "/Users/stevedondley/perl/dancer2_sites/ZillTut/views/layouts/experimental.tt"
$output .=  $stash->get('title');
$output .=  "</title>\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <link rel=\"stylesheet\" href=\"";
#line 9 "/Users/stevedondley/perl/dancer2_sites/ZillTut/views/layouts/experimental.tt"
$output .=  $stash->get(['request', 0, 'uri_base', 0]);
$output .=  "/css/style_no_toc.css\">\n  <link rel=\"stylesheet\" href=\"";
#line 10 "/Users/stevedondley/perl/dancer2_sites/ZillTut/views/layouts/experimental.tt"
$output .=  $stash->get(['request', 0, 'uri_base', 0]);
$output .=  "/javascripts/jquery-ui-1.12.1.custom/jquery-ui.min.css\">\n  <script src=\"//code.jquery.com/jquery-2.1.4.min.js\"></script>\n  <script type=\"text/javascript\">/* <![CDATA[ */\n      !window.jQuery && document.write('<script type=\"text/javascript\" src=\"";
#line 13 "/Users/stevedondley/perl/dancer2_sites/ZillTut/views/layouts/experimental.tt"
$output .=  $stash->get(['request', 0, 'uri_base', 0]);
$output .=  "/javascripts/jquery.js\"><\\/script>')\n  /* ]]> */</script>\n  <script src=\"/javascripts/jquery-ui-1.12.1.custom/jquery-ui.min.js\"></script>\n  <script src=\"https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js\"></script>\n</head>\n\n<body>\n    ";
#line 20 "/Users/stevedondley/perl/dancer2_sites/ZillTut/views/layouts/experimental.tt"
$output .=  $stash->get('content');
$output .=  "\n<div id=\"footer\">\nPowered by <a href=\"http://perldancer.org/\">Dancer2</a> ";
#line 22 "/Users/stevedondley/perl/dancer2_sites/ZillTut/views/layouts/experimental.tt"
$output .=  $stash->get('dancer_version');
$output .=  "\n</div>\n\n<script>\n\n// set up some globals\n\n// cargo-culted code for smooth scrolling in content area\n\$(function() {\n\$('a[href*=\"#\"]')\n  // Remove links that don't actually link to anything\n  .not('[href=\"#\"]')\n  .not('[href=\"#0\"]')\n  .click(function(event) {\n    // On-page links\n    if (\n      location.pathname.replace(/^\\//, '') == this.pathname.replace(/^\\//, '')\n      &&\n      location.hostname == this.hostname\n    ) {\n      // Figure out element to scroll to\n      var target = \$(this.hash);\n      target = target.length ? target : \$('[id=' + this.hash.slice(1) + ']');\n      // Does a scroll target exist?\n      if (target.length) {\n        // Only prevent default if animation is actually gonna happen\n        event.preventDefault();\n        \$('html, body').animate({\n          scrollTop: target.offset().top\n        }, 300, function() {\n          // Callback after animation\n          // Must change focus!\n          var \$target = \$(target);\n          \$target.focus();\n          if (\$target.is(\":focus\")) { // Checking if the target was focused\n            return false;\n          } else {\n            \$target.attr('tabindex','-1'); // Adding tabindex for elements not focusable\n            \$target.focus(); // Set focus again\n          };\n        });\n      }\n    }\n  });\n});\n\n\n</script>\n</body>\n</html>\n";
    } };
    if ($@) {
        $_tt_error = $context->catch($@, \$output);
        die $_tt_error unless $_tt_error->type eq 'return';
    }

    return $output;
},
    DEFBLOCKS => {

    },
});
